# STAGE 0, "build-stage", based on Node.js, to build and compile the frontend
######################################################################################
#here we are using "tiangolo/node-frontend" intead of "node" because this image will provide us premade "nginx.conf" file 
FROM tiangolo/node-frontend:10 as build-stage
# make a directory if not exist where my app is copied in container
WORKDIR /app
# copy package.json inside conatainer working directory (NOTE WHEN YOU ISSUE WORKDIR COMMAND, IT WILL BECOME CURRENT DIRECTORY FOR FUTURE PATH
COPY package*.json /app/
# run npm install inside working directory
RUN npm install
# copy rest of project content inside working directory
# NOTE HAMESHA PEHLA ARGUMENT IS FOR HOST MACHINE IN DOCKER
COPY ./ /app/
#build the project artifact... NOTE: these servers (nginx) will need project artifacts(in build form) only
RUN npm run build


# Stage 1, based on Nginx, to have only the compiled app, ready for production with Nginx
############################################################################################
FROM nginx:1.15
#copy the stage0 artifact(bundle files) to nginx server location
COPY --from=build-stage /app/build/ /usr/share/nginx/html
# Copy the default nginx.conf provided by tiangolo/node-frontend
# this will be sme like "config.xml" file which we used in BMW to configure server
COPY --from=build-stage /nginx.conf /etc/nginx/conf.d/default.conf
# provide the continer port -- this is different to what is inside node application running port
EXPOSE 7000
# below command will nginx server when container starts.. 
#(NO NEED TO RUN NPM START COMMAND... SINCE WE HAVE PROVIDED SERVER WITH ARTIFACT FORMAT, IT NOW KNOWS HOW TO RUN PROJECT AUTOMATICALLY
CMD ["nginx", "-g", "daemon off;"]


